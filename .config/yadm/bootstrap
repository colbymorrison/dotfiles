#! /bin/bash

BASE="$HOME/.config/bootstrap"
YADM_CLASSES="$BASE/yadm-classes"
MANAGERS="$BASE/package-manager.json"
MAC_COREUTILS="$BASE/macos-gnu-coreutils"

source "$HOME/.config/yadm/bootstrap-helpers/helpers.sh"

# -- jq check --
if ! cmd_exists jq; then
	echo "Please install jq (https://stedolan.github.io/jq/download/) and try again"
	exit 1
fi

# -- Detect package manager --
MANAGER=""
if [[ $OSTYPE == "linux-gnu" ]]; then
	for key in $(jq 'keys[]' "$MANAGERS"); do
		key=${key//\"/}
		if cmd_exists "$key"; then
			MANAGER=$key
			break
		fi
	done
elif [[ $OSTYPE == "darwin"* ]]; then
	if ! cmd_exists "brew"; then
		echo -e "${RED}Intalling homebrew"
		eval "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	fi
	MANAGER="brew"
fi

if [[ $MANAGER == "" ]]; then
	echo -e "${RED}Couldn't find the pacakage manager for this system. Please add it to $MANAGERS"
	exit 1
fi

echo -e "${RED}Detected package manager as $MANAGER"

INSTALL_CMD="sudo $MANAGER $(jq .$MANAGER.install "$MANAGERS" | sed s/\"//g)"
UPDATE_CMD="sudo $MANAGER $(jq .$MANAGER.update "$MANAGERS" | sed s/\"//g)"

# -- Update --
# echo "Performing system update"
# $UPDATE_CMD

#### CLI Setup #### 

# -- Bash --
if ! echo "$SHELL" | grep "bash" > /dev/null 2>&1; then
	echo -e "${RED}Chaging shell to bash"
	chsh -s /bin/bash
fi

# -- Git --
install_if_missing git

# -- Gnu Utils for Mac --
if [[ $OSTYPE == "darwin"* ]]; then
	for pkg in $MAC_COREUTILS; do
		install_if_missing "$pkg"
	done
fi

# -- Fzf --
if ! install_if_missing fzf; then
	echo -e "${RED}Please install fzf then try again. See https://github.com/junegunn/fzf#installation"
	exit 1
fi

# -- Yadm setup --
if [[ $(yadm config local.class) == "" ]]; then
	clear
	echo -e "${RED}Please choose a system type (to be used as yadm local.class)"
	sleep 2
	YADM_CLASS=$(fzf < "$YADM_CLASSES")
	yadm config local.class "$YADM_CLASS"
	yadm alt
	yadm checkout "$HOME" > /dev/null 2>&1
fi

# -- Tmux --
install_if_missing tmux

# -- vim-plug -- 
if [ ! -f ~/.vim/autoload/plug.vim ]; then
	printf "\nInstalling vim-plug"
	curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	vim '+PlugInstall' '+UpdateRemotePlugins' 
fi

# -- Neovim --
install_if_missing nvim --pkg-name neovim

# -- wget --
install_if_missing wget

#### GUI Setup ####
[[ $(yadm config local.class) == "linux-server" ]] && exit 0

# -- Alacritty --
install_if_missing alacritty --brew_opts --cask 

if [[ $(yadm config local.class) == "linux-gui" ]]; then
	# -- GNOME --
	if [[ ! $XDG_CURRENT_DESKTOP =~ "GNOME" ]]; then
		echo -e "${RED}Please install GNOME and try again"
		exit 1
	fi

	# -- X11 --
	session=$(loginctl | grep $USER | sed 's/ *//p' | cut -d ' ' -f 1 | head -n 1)
	window_system=$(loginctl show-session $session -p Type | sed 's/Type=//g')

	if [[ ! $window_system == "x11" ]]; then
		echo -e "${RED} Using $window_system insead of X11. Please switch to X11 and try again"
		exit 1
	fi

	# -- X Utils -- 
	install_if_missing xsel
	install_if_missing xprop
	install_if_missing xmodmap


	# -- Load dconf settings --
	~/.dconf-settings/restore.sh

	# -- Rofi --
	install_if_missing rofi

	# -- Pop! Shell -- 
	# Only in Fedora, Arch, Gentoo, and openSUSE. Add manual install 
	if ! (gnome-extensions list | grep pop-shell > /dev/null 2>&1); then 
		if ! install_if_missing gnome-shell-extension-pop-shell --pacman_alt yay; then
			echo -e "${RED}Building POP! Shell manually"
			if ! cmd_exists node; then
				echo -e "${RED}Installing nvm and node"
				# Install nvm
				exec $(curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh) 
				nvm install node
			fi

			if ! cmd_exists tsc; then
				echo -e "${RED}Installing typescript"
				sudo npm install -g typescript
			fi

			mkdir -p /tmp/pop-shell
			pushd /tmp/pop-shell
			git clone https://github.com/pop-os/shell

			echo -e "${RED}Making Pop! Shell"
			if make local-install; then
				echo -e "${RED}Enabling Pop! Shell"
				gnome-extensions enable pop-shell@system76.com
			fi

			popd
			rm -r /tmp/pop-shell

			echo -e "${RED}Removing typescript (leaving Node)"
			sudo npm uninstall -g typescript
		fi
	fi


	# -- Clipmenu --
	# Probly flaky as well
	if install_if_missing clipmenu; then
		systemctl --user start clipmenud
		systemctl --user enable clipmenud
	fi
fi

if [[ $OSTYPE == "Darwin*" ]]; then
	# -- Karabiner Elements --
	install_if_missing karabiner-elements --brew_opts --cask 
fi


printf "Complete! Please log out and log back in.\n"
