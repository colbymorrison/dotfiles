#! /bin/bash
#
# Bootstrap script to be run just after `yadm clone https://github.com/colbymorrison/dotfiles`

# The `yadm bootstrap` command will run this script
#
# Based on the OS type (linux server, linux gui, or mac), install relevant programs for my 
# environment and config. Supports any package manager in ~/.config/bootstrap/package-manager.csv
#
# linux-gui will configure GNOME running on X11 with the Pop! OS Shell
#
# Not intened to be 100% perfect, but gets a good amount of the way there, which is stil
# quite useful.
#
#

BASE="$HOME/.config/bootstrap"
YADM_CLASSES="$BASE/yadm-classes"
MANAGERS="$BASE/package-manager.csv"
MAC_COREUTILS="$BASE/macos-gnu-coreutils"

source "$HOME/.config/yadm/bootstrap-helpers/helpers.sh"

function log(){
	printf "${RED}$1\n\n"
}

# -- Detect package manager --
MANAGER=""
if [[ $OSTYPE == "linux-gnu" ]]; then
	for mgr in $(cut -d, -f 1 < "$MANAGERS" | tail -n +2); do
		mgr=${mgr//\"/}
		if cmd_exists "$mgr"; then
			MANAGER=$mgr
			break
		fi
	done
elif [[ $OSTYPE == "darwin"* ]]; then
	if ! cmd_exists "brew"; then
		log "Intalling homebrew"
		eval "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	fi
	MANAGER="brew"
fi

if [[ $MANAGER == "" ]]; then
	log "Couldn't find the pacakage manager for this system. Please add it to $MANAGERS"
	exit 1
fi

log "Detected package manager as $MANAGER"

INSTALL_CMD="sudo $MANAGER $(grep "$MANAGER" "$MANAGERS" | cut -d, -f 2)"
UPDATE_CMD="sudo $MANAGER $(grep "$MANAGER" "$MANAGERS" | cut -d, -f 3)"

# -- Update --
# echo "Performing system update"
# $UPDATE_CMD

#### CLI Setup #### 

# -- Bash --
if ! echo "$SHELL" | grep "bash" > /dev/null 2>&1; then
	log "Chaging shell to bash"
	chsh -s /bin/bash
fi

# -- Git --
install_if_missing git

# -- Gnu Utils for Mac --
if [[ $OSTYPE == "darwin"* ]]; then
	for pkg in $MAC_COREUTILS; do
		install_if_missing "$pkg"
	done
fi

# -- Fzf --
if ! install_if_missing fzf; then
	log "Please install fzf then try again. See https://github.com/junegunn/fzf#installation"
	exit 1
fi

# -- Yadm setup --
if [[ $(yadm config local.class) == "" ]]; then
	clear
	log "Please choose a system type (to be used as yadm local.class)"
	sleep 2
	YADM_CLASS=$(fzf < "$YADM_CLASSES")
	yadm config local.class "$YADM_CLASS"
	yadm alt
	yadm checkout "$HOME" > /dev/null 2>&1
fi

# -- Tmux --
install_if_missing tmux

# -- vim-plug -- 
if [ ! -f ~/.vim/autoload/plug.vim ]; then
	printf "\nInstalling vim-plug"
	curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	vim '+PlugInstall' '+UpdateRemotePlugins' 
fi

# -- Neovim --
install_if_missing nvim --pkg-name neovim

# -- wget --
install_if_missing wget

#### GUI Setup ####
[[ $(yadm config local.class) == "linux-server" ]] && exit 0

# -- Alacritty --
install_if_missing alacritty --brew_opts --cask 

if [[ $(yadm config local.class) == "linux-gui" ]]; then
	# -- GNOME --
	if [[ ! $XDG_CURRENT_DESKTOP =~ "GNOME" ]]; then
		log "Please install GNOME and try again"
		exit 1
	fi

	# -- X11 --
	session=$(loginctl | grep $USER | sed 's/ *//p' | cut -d ' ' -f 1 | head -n 1)
	window_system=$(loginctl show-session $session -p Type | sed 's/Type=//g')

	if [[ ! $window_system == "x11" ]]; then
		log " Using $window_system insead of X11. Please switch to X11 and try again"
		exit 1
	fi

	# -- X Utils -- 
	install_if_missing xsel
	install_if_missing xprop
	install_if_missing xmodmap


	# -- Load dconf settings --
	~/.dconf-settings/restore.sh

	# -- Rofi --
	install_if_missing rofi

	# -- Pop! Shell -- 
	# Only in Fedora, Arch, Gentoo, and openSUSE. Add manual install 
	if ! (gnome-extensions list | grep pop-shell > /dev/null 2>&1); then 
		if ! install_if_missing gnome-shell-extension-pop-shell --pacman_alt yay; then
			~/.config/yadm/bootstrap-helpers/pop-shell-manual.sh
		fi
	fi


	# -- Clipmenu --
	# Probly flaky as well
	if install_if_missing clipmenu; then
		systemctl --user start clipmenud
		systemctl --user enable clipmenud
	fi
fi

if [[ $OSTYPE == "Darwin*" ]]; then
	# -- Karabiner Elements --
	install_if_missing karabiner-elements --brew_opts --cask 
fi


printf "Complete! Please log out and log back in.\n"
