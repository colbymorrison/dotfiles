#! /bin/bash
#
# Bootstrap script to be run just after `yadm clone https://github.com/colbymorrison/dotfiles`

# The `yadm bootstrap` command will run this script
#
# Based on the OS type (linux server, linux gui, or mac), install relevant programs for my 
# environment and config. Supports any package manager in ~/.config/bootstrap/package-manager.csv
#
#
# Not intened to be 100% perfect, but gets a good amount of the way there, which is stil
# quite useful.
#
#

BASE="$HOME/.config/bootstrap"
YADM_CLASSES="$BASE/yadm-classes"
MANAGERS="$BASE/package-manager.csv"
MAC_COREUTILS="$BASE/macos-gnu-coreutils"
RED='\033[0;31m'

function log(){
	printf "${RED}$1\n\n"
}

function cmd_exists(){
	command -v "$1" >/dev/null 2>&1 
}

#
# Install a package if it is not alreay installed, using the package manager of the current sytem
# Example usage: install_if_missing git 
# Globals:
#   MANAGER
#   INSTALL_CMD
# Arguments:
#   command 
#   [--pkg-name pkg-name] if the package name differs from the command name
#   [--pkg_manager_name-options options] extra options (like -v) to pass to the install command
#   [--pkg_manager_name-alt new_mgr]  by default $MANAGER is taken to be the name of the pkg manager.
#				      Override that name to "new_mgr" if $MANGER is equal to pkg_manager_name.
#   pkg_manager_name can be the name of any manager configured in ~/.config/bootstrap/package-manager.csv
# Returns:
# 0 if installed successfully or already present
# 1 if malformed command or failed to install
function install_if_missing() {
	if [[ $# -lt 1 ]]; then
		echo "Supply a command"
		return 1
	fi

	# Hacked arg parsing. This will not work if the format from help is not followed exactly.
	# TODO use getopt to make this more robust
	CMD_NAME="$1"
	PKG="$1"
	shift 1

	OPTS=""
	ALT=""
	while true; do
		if [[ $1 == "--pkg-name" ]]; then
			PKG=$2
			shift 2
		elif [[ $1 =~ "-options" ]]; then
			mgr_options=${1/--/}
			mgr_options=${mgr_options/-options/}
			[[ $mgr_options == "$MANAGER" ]] && OPTS=$2
			shift 2
		elif [[ $1 =~ "-alt" ]]; then
			mgr_alt=${1/--/}
			mgr_alt=${mgr_alt/-alt/}
			[[ $mgr_alt == "$MANAGER" ]] && ALT=$2
			shift 2
		else
			break;
		fi
	done

	[[ "$ALT" != "" ]] && INSTALL_CMD=${INSTALL_CMD/$MANAGER/$ALT}

	if  ! cmd_exists "$CMD_NAME"; then
		log "Installing $PKG"

		$INSTALL_CMD "$OPTS" "$PKG"

		if ! cmd_exists "$PKG"; then
			log "Failed to install $PKG"
			return 1
		fi
	else
		log "$PKG is already installed :)"
	fi
}

# Build Pop! Shell Manually 
# It only exists in Fedora, Arch, Gentoo, and openSUSE repos.
function build_pop_shell(){
	if ! cmd_exists tsc; then
		log "Installing typescript"
		sudo npm install -g typescript
	fi

	mkdir -p /tmp/pop-shell
	pushd /tmp/pop-shell
	git clone https://github.com/pop-os/shell

	log "Making Pop! Shell"
	if make local-install; then
		log "Enabling Pop! Shell"
		gnome-extensions enable pop-shell@system76.com
	fi

	popd
	rm -r /tmp/pop-shell

	log "Removing typescript (leaving Node)"
	sudo npm uninstall -g typescript
}

# Set MANAGER to the package manager running on this system 
# Globals:
#   MANAGERS
# Arguments:
#   None
# Outputs:
#   Set MANAGER to the package manager for this system
#   If on a mac, install homebrew if not already installed
# Returns:
#   0 if MANAGER set
#   1 the package manager for this system is not in $MANAGERS
function detect_package_manager(){
	MANAGER=""
	if [[ $OSTYPE == "linux-gnu" ]]; then
		for mgr in $(cut -d, -f 1 < "$MANAGERS" | tail -n +2); do
			mgr=${mgr//\"/}
			if cmd_exists "$mgr"; then
				MANAGER=$mgr
				break
			fi
		done
	elif [[ $OSTYPE == "darwin"* ]]; then
		if ! cmd_exists "brew"; then
			log "Intalling homebrew"
			eval "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
		fi
		MANAGER="brew"
	fi

	if [[ $MANAGER == "" ]]; then
		log "Couldn't find the pacakage manager for this system. Please add it to $MANAGERS"
		exit 1
	fi
	log "Detected package manager as $MANAGER"

	INSTALL_CMD="sudo $MANAGER $(grep "$MANAGER" "$MANAGERS" | cut -d, -f 2)"
	UPDATE_CMD="sudo $MANAGER $(grep "$MANAGER" "$MANAGERS" | cut -d, -f 3)"
}

# Install programs for CLI setup
# Globals:
#   MAC_COREUTILS
#   YADM_CLASSES
# Returns:
#   0 if all installs were attempted
#   1 if fzf failed to install, since we use it later in the function
function cli_setup() {
	# -- Bash --
	if ! echo "$SHELL" | grep "bash" > /dev/null 2>&1; then
		log "Chaging shell to bash"
		chsh -s /bin/bash
	fi

	# -- Git --
	install_if_missing git

	# -- Gnu Utils for Mac --
	if [[ $OSTYPE == "darwin"* ]]; then
		for pkg in $MAC_COREUTILS; do
			install_if_missing "$pkg"
		done
	fi

	# -- Fzf --
	if ! install_if_missing fzf; then
		log "Please install fzf then try again. See https://github.com/junegunn/fzf#installation"
		exit 1
	fi

	# -- Yadm setup --
	if [[ $(yadm config local.class) == "" ]]; then
		clear
		log "Please choose a system type (to be used as yadm local.class)"
		sleep 2
		YADM_CLASS=$(fzf < "$YADM_CLASSES")
		yadm config local.class "$YADM_CLASS"
		yadm alt
		yadm checkout "$HOME" > /dev/null 2>&1
	fi

	# -- Tmux --
	install_if_missing tmux

	# -- vim-plug -- 
	if [ ! -f ~/.vim/autoload/plug.vim ]; then
		printf "\nInstalling vim-plug"
		curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
		vim '+PlugInstall' '+UpdateRemotePlugins' 
	fi

	# -- Neovim --
	install_if_missing nvim --pkg-name neovim

	# -- wget --
	install_if_missing wget
}


# Install programs for GUI setup
# For Linux, configured as GNOME running on X11 with the Pop! OS Shell
# Returns:
#   0 if all installs were attempted
#   1 if linux and either X11 or GNOME is missing (TODO automate this?)
function gui_setup(){
	# -- Alacritty --
	install_if_missing alacritty --brew_opts --cask 

	if [[ $(yadm config local.class) == "linux-gui" ]]; then
		# -- GNOME --
		if [[ ! $XDG_CURRENT_DESKTOP =~ "GNOME" ]]; then
			log "Please install GNOME and try again"
			return 1
		fi

		# -- X11 --
		session=$(loginctl | grep $USER | sed 's/ *//p' | cut -d ' ' -f 1 | head -n 1)
		window_system=$(loginctl show-session $session -p Type | sed 's/Type=//g')

		if [[ ! $window_system == "x11" ]]; then
			log " Using $window_system insead of X11. Please switch to X11 and try again"
			return 1
		fi

		# -- X Utils -- 
		install_if_missing xsel
		install_if_missing xprop
		install_if_missing xmodmap


		# -- Load dconf settings --
		~/.dconf-settings/restore.sh

		# -- Rofi --
		install_if_missing rofi

		# -- Pop! Shell -- 
		if ! (gnome-extensions list | grep pop-shell > /dev/null 2>&1); then 
			if ! install_if_missing gnome-shell-extension-pop-shell --pacman_alt yay; then
				build_pop_shell
			fi
		fi


		# -- Clipmenu --
		# Probly flaky as well
		if install_if_missing clipmenu; then
			systemctl --user start clipmenud
			systemctl --user enable clipmenud
		fi
	fi

	if [[ $OSTYPE == "Darwin*" ]]; then
		# -- Karabiner Elements --
		install_if_missing karabiner-elements --brew_opts --cask 
	fi
}

detect_package_manager || exit 1
cli_setup || exit 1
if [[ $(yadm config local.class) != "linux-server" ]]; then
	 gui_setup || exit 1
fi
printf "Complete! Please log out and log back in.\n"
